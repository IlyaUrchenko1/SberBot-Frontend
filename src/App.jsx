import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import "./App.css";

function App() {
    const [messages, setMessages] = useState([]);
    const [inputValue, setInputValue] = useState("");
    const [loading, setLoading] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const chatHistoryRef = useRef(null); // –†–µ—Ñ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏



    const handleSend = async () => {
        if (!inputValue.trim()) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        setMessages((prevMessages) => [
            ...prevMessages,
            { text: inputValue, sender: "user" },
        ]);
        setInputValue("");

        setLoading(true);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try {
            console.log(inputValue);
            const response = await axios({
                method: "POST",
                url: "https://7372-176-59-172-99.ngrok-free.app/chat/",
                data:{text: inputValue},
            })
            console.log(response.data);
            const botResponse = response.data.bot_response || "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞";

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç
            setMessages((prevMessages) => [
                ...prevMessages,
                { text: botResponse, sender: "bot" },
            ]);
        } catch (error) {
            setMessages((prevMessages) => [
                ...prevMessages,
                { text: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º üò¢", sender: "bot" },
            ]);
        } finally {
            setLoading(false); // –í—ã–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        }

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setInputValue("");
    };

    useEffect(() => {
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (chatHistoryRef.current) {
            chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;
        }
    }, [messages]);

    return (
        <>
            <div className="chat-history" ref={chatHistoryRef}>
                {messages.map((message, index) => (
                    <div
                        key={index}
                        className={`message ${message.sender}`}>
                        {message.text}
                    </div>
                ))}
            </div>
            <div className="input-container">
                <input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."/>
                <button onClick={handleSend} disabled={loading}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>


        </>
    );
}

export default App;
